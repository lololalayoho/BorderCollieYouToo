// Generated by gencpp from file darknet_rospy_msgs/DarkBox.msg
// DO NOT EDIT!


#ifndef DARKNET_ROSPY_MSGS_MESSAGE_DARKBOX_H
#define DARKNET_ROSPY_MSGS_MESSAGE_DARKBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_rospy_msgs
{
template <class ContainerAllocator>
struct DarkBox_
{
  typedef DarkBox_<ContainerAllocator> Type;

  DarkBox_()
    : label()
    , probability(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)  {
    }
  DarkBox_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , probability(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef double _probability_type;
  _probability_type probability;

   typedef int64_t _xmin_type;
  _xmin_type xmin;

   typedef int64_t _ymin_type;
  _ymin_type ymin;

   typedef int64_t _xmax_type;
  _xmax_type xmax;

   typedef int64_t _ymax_type;
  _ymax_type ymax;





  typedef boost::shared_ptr< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> const> ConstPtr;

}; // struct DarkBox_

typedef ::darknet_rospy_msgs::DarkBox_<std::allocator<void> > DarkBox;

typedef boost::shared_ptr< ::darknet_rospy_msgs::DarkBox > DarkBoxPtr;
typedef boost::shared_ptr< ::darknet_rospy_msgs::DarkBox const> DarkBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace darknet_rospy_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/home/nvidia/catkin_ws/src/common_msg/sensor_msgs/msg'], 'geometry_msgs': ['/home/nvidia/catkin_ws/src/common_msg/geometry_msgs/msg'], 'darknet_rospy_msgs': ['/home/nvidia/catkin_ws/src/darknet_rospy/darknet_rospy_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "120a71a028208c83a2c19b80b9b8c490";
  }

  static const char* value(const ::darknet_rospy_msgs::DarkBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x120a71a028208c83ULL;
  static const uint64_t static_value2 = 0xa2c19b80b9b8c490ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_rospy_msgs/DarkBox";
  }

  static const char* value(const ::darknet_rospy_msgs::DarkBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n\
float64 probability\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
";
  }

  static const char* value(const ::darknet_rospy_msgs::DarkBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.probability);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DarkBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_rospy_msgs::DarkBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_rospy_msgs::DarkBox_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "xmin: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROSPY_MSGS_MESSAGE_DARKBOX_H
